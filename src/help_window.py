import tkinter as tk
from tkinter.ttk import Notebook


HELP_PAGE1 = """
    В приложении используются компоненты из библиотеки Matplotlib: по центру находится область для рисования графиков, а слева расположено его стандартное меню.
    В правой области расположены компоненты для установки параметров, определяющих поведение графиков (комбинации Ctrl+C, Ctrl+V работают только на английской раскладке).
- сначала идёт выбор формул, по которым нужно рисовать;
- параметры r и b задаются диапазонами. Для установки одного числа надо повторить значения. В качестве знака разделителя используется точка;
- параметр х[0] задаёт начальные значения;
- далее указывается сколько итераций надо проделать без отрисовки и сколько с ней;
- список значений по умолчанию зависит от содержимого параметра defaults в файле settings.json;
- длина задержки отрисовки задается в миллисекундах;
- последним выбирается тип графика, который надо отрисовать, также присутствует возможность вывести сочетания предыдущих графиков одновременно. 
    По нажатию кнопки «Отобразить» сначала пройдет вычисление всех точек (как без отрисовки, так и с ней). В этот момент текст кнопки сменится на «Завершить вычисление», а прогресс-бар будет показывать сколько всего итераций прошло (на установление устойчивости значений + подсчёт точек для отображения). Если прервать операцию на моменте установления устойчивости, процесс завершится сразу, иначе будут отображены те точки, которые успели вычислить.
    При завершении вычисления может появиться сообщение о найденных исключениях, если ответить «Да», то отроется блокнот с файлом error.txt, который каждый раз перезаписывается (при ошибках). После закрытия блокнота продолжится выполнение программы (начнется отрисовка полученных точек). Во время отрисовки появится возможность «Завершить анимацию" или же поставить её на «Паузу», а затем «Продолжить».
"""

HELP_PAGE2 = """
    Приложение сохраняет файлы settings.json и error.txt в каталоге, указанного в файле main.py.
    В файле настроек settings.json сначала задан размер заголовка и подписей на осях графика(fontsize), а за ним можно указать длительность задержки отрисовки по умолчанию (delay_time). После чего идут настройки отображений для графиков:
- График зависимостей (NX);
- Фазовый портрет (XX);
- Бифуркационная диаграмма (RX).
    Каждая из них содержит одинаковые параметры:
- группы f1 и f2 задаются для соответствующих функций и содержат:
    * подпись к легенде (labelN),
    * цвет линии/точек (colorN),
    * тип линии/маркера (markerN),
    * размер маркеров (markersizeN).
N = 1, 2 номер графика (для фазового портрета и бифуркационной диаграммы 2 номер - это отображение новых точек).
- коэффициенты coef_xlim и coef_ylim позволяют задать масштаб рисунка, путем регулирования сводного пространства между краевыми точками и границами графика (относительно размера графика: axis.set_plim(p_1-coef(p_2 - p_1), p_2+coef(p_2 - p_1)), где p - x, y, 1 - min, 2 - max)
- последнее значение (legend_loc) задает положение легенды.
    Если удалить файл settings.json, то при запуске приложения он появится с исходными параметрами.
"""

HELP_PAGE3 = """
    Редактировать кнопки в области "Установка значений по умолчанию" можно через файл settings.json. Последняя группа настроек (defaults) содержит такие же параметры, как и на форме. Структура значений, следующая:
{
    "name": "<отображаемое название кнопки>",
    "f1": <true - если данные подходят для 1 формулы, false - наоборот>,
    "f2": <true - если данные подходят для 2 формулы, false - наоборот>,
    "r": [<начало>, <конец>, <шаг>],
    "b": [<начало>, <конец>, <шаг>],
    "x0": <начальное значение>,
    "n_iter": <кол-во итераций для достижения устойчивого состояния>,
    "n_draw": <кол-во итераций для отрисовки графиков>
}
    Если удалить файл settings.json, то при запуске приложения он появится с исходными значениями по умолчанию.
"""


class Help(tk.Toplevel):
	"""Диалоговое окно справки."""
	def __init__(self, parent):
		"""Диалоговое окно справки."""
		super().__init__(parent)
		w = self.winfo_screenwidth()
		h = self.winfo_screenheight()
		w = w//2 # Середина экрана
		h = h//2
		w = w - 400 # Смещение от середины
		h = h - 250
		self.geometry('800x500+{}+{}'.format(w, h))
		self.resizable(False, False)
		self.title('Справка')
		# Создание вкладок
		notebook = Notebook(self, height = 440)
		notebook.pack(fill = tk.X)
		frame1 = tk.Frame(notebook)
		frame2 = tk.Frame(notebook)
		frame3 = tk.Frame(notebook)
		frame1.pack(fill = tk.BOTH)
		frame2.pack(fill = tk.BOTH)
		frame3.pack(fill = tk.BOTH)
		notebook.add(frame1, text="Описание программы")
		notebook.add(frame2, text="Внешний вид графика")
		notebook.add(frame3, text="Параметры по умолчанию")
		FONT = ('Arial', 12)
		text1 = tk.Text(frame1, font = FONT, wrap = tk.WORD)
		text1.pack(fill = tk.BOTH, ipadx = 10, ipady = 10)
		text2 = tk.Text(frame2, font = FONT, wrap = tk.WORD)
		text2.pack(fill = tk.BOTH)
		text3 = tk.Text(frame3, font = FONT, wrap = tk.WORD)
		text3.pack(fill = tk.BOTH)
		# Заполнение текста
		text1.insert(1.0, HELP_PAGE1)
		text2.insert(1.0, HELP_PAGE2)
		text3.insert(1.0, HELP_PAGE3)
		text1.configure(state = tk.DISABLED)
		text2.configure(state = tk.DISABLED)
		text3.configure(state = tk.DISABLED)
		text1.bind("<MouseWheel>", lambda event: "break")
		text2.bind("<MouseWheel>", lambda event: "break")
		text3.bind("<MouseWheel>", lambda event: "break")
		tk.Button(self, text='OK', command = self.destroy).pack(anchor = tk.S, pady = 3, ipadx = 30)